
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap Demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
</head>
<body>
    <div id="liveAlertPlaceholder"></div>
    <button type="button" class="btn btn-primary" id="liveAlertBtn">Show live alert</button>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Product Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Remarks</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody id="table_bdy">
        </tbody>
    </table>

    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal2">New Product</button>

    <!-- Update Product Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Update Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="prod_id">
                    <div class="mb-3">
                        <label for="ProductName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" placeholder="Enter Product Name" id="ProductName">
                    </div>
                    <div class="mb-3">
                        <label for="Price" class="form-label">Price</label>
                        <input type="number" class="form-control" placeholder="Enter Price" id="Price">
                    </div>
                    <div class="mb-3">
                        <label for="Quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" placeholder="Enter Quantity" id="Quantity">
                    </div>
                    <div class="mb-3">
                        <label for="Remarks" class="form-label">Remarks</label>
                        <input type="text" class="form-control" placeholder="Enter Remarks" id="Remarks">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save" onclick="send_data()" data-bs-dismiss="modal">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- New Product Modal -->
    <div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel2" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel2">New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="prod_id2">
                    <div class="mb-3">
                        <label for="ProductName2" class="form-label">Product Name</label>
                        <input type="text" class="form-control" placeholder="Enter Product Name" id="ProductName2">
                    </div>
                    <div class="mb-3">
                        <label for="Price2" class="form-label">Price</label>
                        <input type="number" class="form-control" placeholder="Enter Price" id="Price2">
                    </div>
                    <div class="mb-3">
                        <label for="Quantity2" class="form-label">Quantity</label>
                        <input type="number" class="form-control" placeholder="Enter Quantity" id="Quantity2">
                    </div>
                    <div class="mb-3">
                        <label for="Remarks2" class="form-label">Remarks</label>
                        <input type="text" class="form-control" placeholder="Enter Remarks" id="Remarks2">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save2" onclick="send_data('get')" data-bs-dismiss="modal">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        console.log("Crud.js");
        function get() {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://localhost:44339/Product/get_prods', true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function () {
                if (this.status === 200) {
                    string = ""
                    table_bdy = document.getElementById('table_bdy')
                    let products = JSON.parse(this.responseText)
                    console.log(products)
                    products.forEach(element => {
                        string += `<tr><th scope="row">${element['ProductName']}</th><td>${element['Price']}</td><td>${element['Qty']}</td><td>${element['Remarks']}</td><td><button class="btn btn-primary" onclick="update_btn(${element['ProductId']})"data-bs-toggle="modal" data-bs-target="#exampleModal">Update</button>
<button class="btn btn-danger" onclick="del_btn(${element['ProductId']})">Delete</button>
</td></tr>`
                    });
                    table_bdy.innerHTML = string;

                } else {
                    console.error("Error occurred:", this.statusText);
                    console.log("Some error occurred!");
                }
            };
            xhr.send()
        }
        function del_btn(id) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://localhost:44339/Product/Delete/' + id, true);
            xhr.onload = function () {
                if (this.status === 200) {
                    let resp = JSON.parse(this.responseText)
                    window.alert(resp['message'])
                    get()
                }
            }
            xhr.send()
        }
        function update_btn(id) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://localhost:44339/Product/Details/' + id, true);
            xhr.onload = function () {
                if (this.status === 200) {
                    let products = JSON.parse(this.responseText)
                    prod_id = document.getElementById("prod_id").value = products[0]['ProductId']
                    ProductName = document.getElementById("ProductName").value = products[0]['ProductName']
                    Price = document.getElementById("Price").value = products[0]['Price']
                    Quantity = document.getElementById("Quantity").value = products[0]['Qty']
                    Remarks = document.getElementById("Remarks").value = products[0]['Remarks']



                    get()
                }
            }
            xhr.send()
        }
        get()
        function send_data(string) {
            if (string === 'get') {
                create()
            }
            else {
                prod_id = parseInt(document.getElementById("prod_id").value)
                ProductName = document.getElementById("ProductName").value
                Price = toDecimalFormat(document.getElementById("Price").value)
                Quantity = parseInt(document.getElementById("Quantity").value)
                Remarks = document.getElementById("Remarks").value
                const xhr = new XMLHttpRequest()
                xhr.open('POST', `https://localhost:44339/Product/Edit/${prod_id}`, true);
                xhr.setRequestHeader('Content-Type', 'application/Json');
                xhr.onload = function () {
                    if (this.status === 200) {
                        appendAlert(JSON.parse(this.responseText)['message'], 'success')
                        //content.innerHTML = `<pre>${this.responseText}</pre>`;

                    } else {
                        appendAlert(JSON.parse(this.responseText)['message'], 'danger')
                        //content.innerHTML = "Some error occurred!";
                    }
                    get()

                };
                params = new Object()
                params.ProductId = prod_id;
                params.ProductName = ProductName;
                params.Price = Price;
                params.Qty = Quantity;
                params.Remarks = Remarks;
                params = JSON.stringify(params)
                xhr.send(params);


            }
        }


        function toDecimalFormat(value) {
            let num = parseFloat(value);
            if (isNaN(num)) {
                throw new Error("Invalid number");
            }
            num = num.toFixed(2); // Ensure two decimal places
            if (num > 999999.99) {
                throw new Error("Value exceeds DECIMAL(8,2) range");
            }
            return num;
        }
        function create() {
            prod_id = parseInt(document.getElementById("prod_id2").value)
            ProductName = document.getElementById("ProductName2").value
            Price = toDecimalFormat(document.getElementById("Price2").value)
            Quantity = parseInt(document.getElementById("Quantity2").value)
            Remarks = document.getElementById("Remarks2").value
            const xhr = new XMLHttpRequest()
            xhr.open('POST', 'https://localhost:44339/Product/create', true);
            xhr.setRequestHeader('Content-Type', 'application/Json');
            xhr.onload = function () {
                if (this.status === 200) {
                    console.log("Response received: ", this.responseText);
                    appendAlert(JSON.parse(this.responseText)['message'], 'success')
                    //content.innerHTML = `<pre>${this.responseText}</pre>`;

                } else {
                    console.error("Error occurred:", this.statusText);
                    //content.innerHTML = "Some error occurred!";
                    appendAlert(JSON.parse(this.responseText)['message'], 'danger')
                }
                get()
            };
            params = new Object()
            params.ProductId = 0;
            params.ProductName = ProductName;
            params.Price = Price;
            params.Qty = Quantity;
            params.Remarks = Remarks;
            params = JSON.stringify(params)
            xhr.send(params);



        }
        const alertPlaceholder = document.getElementById('liveAlertPlaceholder')
        const appendAlert = (message, type) => {
            const wrapper = document.createElement('div')
            wrapper.innerHTML = [
                `<div class="alert alert-${type} alert-dismissible" role="alert">`,
                `   <div>${message}</div>`,
                '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                '</div>'
            ].join('')

            alertPlaceholder.append(wrapper)
        }

        const alertTrigger = document.getElementById('liveAlertBtn')
        if (alertTrigger) {
            alertTrigger.addEventListener('click', () => {
                appendAlert('Nice, you triggered this alert message!', 'success')
            })
        }
    </script>
    <script src="js/crud.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
</body>
</html>
